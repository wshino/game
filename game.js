// Game State
const gameState = {
    gold: 1000,
    currentPort: 'lisbon',
    inventory: {},
    ship: {
        name: '„Ç´„É©„Éô„É´Ëàπ',
        capacity: 50,
        speed: 1
    }
};

// Port Definitions
const ports = {
    lisbon: {
        name: '„É™„Çπ„Éú„É≥',
        emoji: 'üáµüáπ',
        description: '„Éù„É´„Éà„Ç¨„É´„ÅÆÈ¶ñÈÉΩ„ÄÇÂÜíÈô∫„ÅÆÂßã„Åæ„Çä„ÅÆÂú∞„ÄÇ'
    },
    seville: {
        name: '„Çª„Éì„É™„Ç¢',
        emoji: 'üá™üá∏',
        description: '„Çπ„Éö„Ç§„É≥„ÅÆÊ∏ØÁî∫„ÄÇÊñ∞Â§ßÈô∏„Å∏„ÅÆÁéÑÈñ¢Âè£„ÄÇ'
    },
    venice: {
        name: '„É¥„Çß„Éç„ÉÑ„Ç£„Ç¢',
        emoji: 'üáÆüáπ',
        description: 'Ê∞¥„ÅÆÈÉΩ„ÄÇÊù±ÊñπË≤øÊòì„ÅÆ‰∏≠ÂøÉÂú∞„ÄÇ'
    },
    alexandria: {
        name: '„Ç¢„É¨„ÇØ„Çµ„É≥„Éâ„É™„Ç¢',
        emoji: 'üá™üá¨',
        description: '„Ç®„Ç∏„Éó„Éà„ÅÆÂè§ÈÉΩ„ÄÇÈ¶ôËæõÊñô„ÅÆÈõÜÁ©çÂú∞„ÄÇ'
    },
    calicut: {
        name: '„Ç´„É™„Ç´„ÉÉ„Éà',
        emoji: 'üáÆüá≥',
        description: '„Ç§„É≥„Éâ„ÅÆÊ∏ØÁî∫„ÄÇËÉ°Ê§í„ÅÆÁî£Âú∞„ÄÇ'
    },
    malacca: {
        name: '„Éû„É©„ÉÉ„Ç´',
        emoji: 'üá≤üáæ',
        description: 'Êù±Âçó„Ç¢„Ç∏„Ç¢„ÅÆ‰∫§ÊòìÊã†ÁÇπ„ÄÇ'
    },
    nagasaki: {
        name: 'Èï∑Â¥é',
        emoji: 'üáØüáµ',
        description: 'Êó•Êú¨„ÅÆÊ∏ØÁî∫„ÄÇÈäÄ„Å®Áµπ„ÅÆÂèñÂºï„ÅåÁõõ„Çì„ÄÇ'
    }
};

// Goods Definitions with base prices
const goods = {
    wine: { name: '„ÉØ„Ç§„É≥', emoji: 'üç∑', basePrice: 50 },
    cloth: { name: 'ÁπîÁâ©', emoji: 'üßµ', basePrice: 80 },
    spices: { name: 'È¶ôËæõÊñô', emoji: 'üå∂Ô∏è', basePrice: 150 },
    silk: { name: 'Áµπ', emoji: 'üéÄ', basePrice: 200 },
    gold_ore: { name: 'ÈáëÈâ±Áü≥', emoji: 'üèÜ', basePrice: 300 },
    porcelain: { name: 'Èô∂Âô®', emoji: 'üè∫', basePrice: 120 },
    tea: { name: 'Ëå∂', emoji: 'üçµ', basePrice: 100 },
    silver: { name: 'ÈäÄ', emoji: 'üíç', basePrice: 250 }
};

// Port-specific price modifiers (multipliers)
const portPrices = {
    lisbon: { wine: 0.8, cloth: 1.0, spices: 2.0, silk: 1.8, gold_ore: 1.5, porcelain: 1.5, tea: 1.6, silver: 1.4 },
    seville: { wine: 0.9, cloth: 0.9, spices: 1.8, silk: 1.7, gold_ore: 0.7, porcelain: 1.6, tea: 1.5, silver: 1.3 },
    venice: { wine: 1.1, cloth: 0.7, spices: 1.5, silk: 1.3, gold_ore: 1.6, porcelain: 1.4, tea: 1.4, silver: 1.5 },
    alexandria: { wine: 1.2, cloth: 1.1, spices: 0.9, silk: 1.2, gold_ore: 1.4, porcelain: 1.3, tea: 1.2, silver: 1.4 },
    calicut: { wine: 1.5, cloth: 1.3, spices: 0.6, silk: 1.0, gold_ore: 1.3, porcelain: 1.2, tea: 0.9, silver: 1.2 },
    malacca: { wine: 1.6, cloth: 1.4, spices: 0.8, silk: 0.9, gold_ore: 1.2, porcelain: 1.0, tea: 0.8, silver: 1.1 },
    nagasaki: { wine: 1.8, cloth: 1.5, spices: 1.3, silk: 0.7, gold_ore: 1.5, porcelain: 0.8, tea: 0.7, silver: 0.6 }
};

// Ship upgrades
const shipUpgrades = [
    {
        name: '„Ç´„É©„Éô„É´Ëàπ',
        capacity: 50,
        speed: 1,
        cost: 0,
        description: 'Â∞èÂûã„ÅßÊ©üÂãïÊÄß„ÅÆÈ´ò„ÅÑËàπ'
    },
    {
        name: '„Ç≠„É£„É©„ÉÉ„ÇØËàπ',
        capacity: 100,
        speed: 1.2,
        cost: 5000,
        description: 'Â§ßÂûã„ÅßÁ©çËºâÈáè„ÅåÂ§ö„ÅÑËàπ'
    },
    {
        name: '„Ç¨„É¨„Ç™„É≥Ëàπ',
        capacity: 150,
        speed: 1.5,
        cost: 15000,
        description: 'ÊúÄÂ§ßÁ¥ö„ÅÆË≤øÊòìËàπ'
    },
    {
        name: 'Êù±„Ç§„É≥„Éâ‰ºöÁ§æËàπ',
        capacity: 250,
        speed: 2,
        cost: 50000,
        description: '‰ºùË™¨„ÅÆÂ§ßÂûãË≤øÊòìËàπ'
    }
];

// Helper Functions
function getCurrentPortName() {
    return ports[gameState.currentPort].name;
}

function getCargoUsed() {
    return Object.values(gameState.inventory).reduce((sum, qty) => sum + qty, 0);
}

function getCargoSpace() {
    return gameState.ship.capacity - getCargoUsed();
}

function getPrice(goodId, isBuying = true) {
    const good = goods[goodId];
    const multiplier = portPrices[gameState.currentPort][goodId];
    const basePrice = good.basePrice * multiplier;
    // Add some randomness (¬±10%)
    const randomFactor = 0.9 + Math.random() * 0.2;
    const price = Math.round(basePrice * randomFactor);
    // Add markup for buying
    return isBuying ? price : Math.round(price * 0.8);
}

function addLog(message) {
    const logDiv = document.getElementById('game-log');
    const p = document.createElement('p');
    p.textContent = message;
    logDiv.appendChild(p);
    logDiv.scrollTop = logDiv.scrollHeight;
}

// Update UI Functions
function updateStatusBar() {
    document.getElementById('gold').textContent = gameState.gold;
    document.getElementById('ship-name').textContent = gameState.ship.name;
    document.getElementById('cargo-space').textContent = getCargoUsed();
    document.querySelector('#cargo-space + .stat-unit').textContent = ` / ${gameState.ship.capacity}`;
    document.getElementById('current-port').textContent = getCurrentPortName();
}

function updateInventory() {
    const inventoryDiv = document.getElementById('inventory');
    inventoryDiv.innerHTML = '';

    if (Object.keys(gameState.inventory).length === 0) {
        inventoryDiv.innerHTML = '<p style="grid-column: 1/-1; text-align: center; color: #666;">Âú®Â∫´„Å™„Åó</p>';
        return;
    }

    for (const [goodId, qty] of Object.entries(gameState.inventory)) {
        if (qty > 0) {
            const good = goods[goodId];
            const div = document.createElement('div');
            div.className = 'inventory-item';
            div.innerHTML = `
                <div class="inventory-item-name">${good.emoji} ${good.name}</div>
                <div class="inventory-item-qty">${qty}ÂÄã</div>
            `;
            inventoryDiv.appendChild(div);
        }
    }
}

function updateTradeGoods() {
    const tradeDiv = document.getElementById('trade-goods');
    tradeDiv.innerHTML = '';

    for (const [goodId, good] of Object.entries(goods)) {
        const buyPrice = getPrice(goodId, true);
        const sellPrice = getPrice(goodId, false);
        const hasItem = gameState.inventory[goodId] > 0;

        const div = document.createElement('div');
        div.className = 'good-item';
        div.innerHTML = `
            <span class="item-name">${good.emoji} ${good.name}</span>
            <span class="item-price">Ë≤∑: ${buyPrice}G / Â£≤: ${sellPrice}G</span>
            <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                <button class="btn btn-buy" onclick="buyGood('${goodId}')">Ë≤∑„ÅÜ</button>
                <button class="btn btn-buy" onclick="buyAllGood('${goodId}')">ÂÖ®ÈÉ®Ë≤∑„ÅÜ</button>
                <button class="btn btn-sell" onclick="sellGood('${goodId}')" ${!hasItem ? 'disabled' : ''}>Â£≤„Çã</button>
                <button class="btn btn-sell" onclick="sellAllGood('${goodId}')" ${!hasItem ? 'disabled' : ''}>ÂÖ®ÈÉ®Â£≤„Çã</button>
            </div>
        `;
        tradeDiv.appendChild(div);
    }
}

function updatePorts() {
    const portsDiv = document.getElementById('ports');
    portsDiv.innerHTML = '';

    for (const [portId, port] of Object.entries(ports)) {
        if (portId === gameState.currentPort) continue;

        const div = document.createElement('div');
        div.className = 'port-item';

        const travelCost = Math.round(50 / gameState.ship.speed);

        div.innerHTML = `
            <span class="item-name">${port.emoji} ${port.name}</span>
            <span style="font-size: 0.9em; color: #666;">${port.description}</span>
            <button class="btn btn-travel" onclick="travelTo('${portId}')">
                Ëà™Êµ∑ (Ë≤ªÁî®: ${travelCost}G)
            </button>
        `;
        portsDiv.appendChild(div);
    }
}

function updateUpgrades() {
    const upgradesDiv = document.getElementById('upgrades');
    upgradesDiv.innerHTML = '';

    const currentShipIndex = shipUpgrades.findIndex(s => s.name === gameState.ship.name);

    shipUpgrades.forEach((ship, index) => {
        if (index <= currentShipIndex) return;

        const div = document.createElement('div');
        div.className = 'upgrade-item';
        const canAfford = gameState.gold >= ship.cost;

        div.innerHTML = `
            <div>
                <div class="item-name">‚õµ ${ship.name}</div>
                <div style="font-size: 0.85em; color: #666; margin-top: 5px;">
                    ${ship.description}<br>
                    Á©çËºâÈáè: ${ship.capacity} / ÈÄüÂ∫¶: ${ship.speed}x
                </div>
            </div>
            <div style="text-align: right;">
                <div class="item-price">${ship.cost}G</div>
                <button class="btn btn-upgrade" onclick="upgradeShip(${index})" ${!canAfford ? 'disabled' : ''}>
                    Ë≥ºÂÖ•
                </button>
            </div>
        `;
        upgradesDiv.appendChild(div);
    });

    if (currentShipIndex === shipUpgrades.length - 1) {
        upgradesDiv.innerHTML = '<p style="text-align: center; color: #666;">ÊúÄÈ´òÁ¥ö„ÅÆËàπ„ÇíÊâÄÊúâ„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ</p>';
    }
}

function updateAll() {
    updateStatusBar();
    updateInventory();
    updateTradeGoods();
    updatePorts();
    updateUpgrades();
}

// Game Actions
function buyGood(goodId) {
    const price = getPrice(goodId, true);

    if (gameState.gold < price) {
        addLog(`‚ùå Ë≥áÈáë„ÅåË∂≥„Çä„Åæ„Åõ„ÇìÔºÅ(ÂøÖË¶Å: ${price}G)`);
        return;
    }

    if (getCargoSpace() < 1) {
        addLog('‚ùå Ëàπ„ÅÆÁ©çËºâÈáè„Åå‰∏ÄÊùØ„Åß„ÅôÔºÅ');
        return;
    }

    gameState.gold -= price;
    gameState.inventory[goodId] = (gameState.inventory[goodId] || 0) + 1;

    const good = goods[goodId];
    addLog(`‚úÖ ${good.emoji} ${good.name}„Çí${price}G„ÅßË≥ºÂÖ•„Åó„Åæ„Åó„Åü„ÄÇ`);

    updateAll();
}

function buyAllGood(goodId) {
    const price = getPrice(goodId, true);
    const good = goods[goodId];

    // Calculate how many we can buy based on money
    const maxByMoney = Math.floor(gameState.gold / price);

    // Calculate how many we can buy based on cargo space
    const maxByCargo = getCargoSpace();

    // Take the minimum of both constraints
    const maxCanBuy = Math.min(maxByMoney, maxByCargo);

    if (maxCanBuy < 1) {
        if (gameState.gold < price) {
            addLog(`‚ùå Ë≥áÈáë„ÅåË∂≥„Çä„Åæ„Åõ„ÇìÔºÅ(ÂøÖË¶Å: ${price}G)`);
        } else {
            addLog('‚ùå Ëàπ„ÅÆÁ©çËºâÈáè„Åå‰∏ÄÊùØ„Åß„ÅôÔºÅ');
        }
        return;
    }

    const totalCost = maxCanBuy * price;
    gameState.gold -= totalCost;
    gameState.inventory[goodId] = (gameState.inventory[goodId] || 0) + maxCanBuy;

    addLog(`‚úÖ ${good.emoji} ${good.name}„Çí${maxCanBuy}ÂÄã„ÄÅÂêàË®à${totalCost}G„ÅßË≥ºÂÖ•„Åó„Åæ„Åó„Åü„ÄÇ`);

    updateAll();
}

function sellGood(goodId) {
    if (!gameState.inventory[goodId] || gameState.inventory[goodId] < 1) {
        addLog('‚ùå „Åù„ÅÆÂïÜÂìÅ„ÇíÊåÅ„Å£„Å¶„ÅÑ„Åæ„Åõ„ÇìÔºÅ');
        return;
    }

    const price = getPrice(goodId, false);
    gameState.gold += price;
    gameState.inventory[goodId] -= 1;

    const good = goods[goodId];
    addLog(`üí∞ ${good.emoji} ${good.name}„Çí${price}G„ÅßÂ£≤Âç¥„Åó„Åæ„Åó„Åü„ÄÇ`);

    // Add animation to gold
    const goldElement = document.getElementById('gold');
    goldElement.classList.add('gold-animation');
    setTimeout(() => goldElement.classList.remove('gold-animation'), 500);

    updateAll();
}

function sellAllGood(goodId) {
    if (!gameState.inventory[goodId] || gameState.inventory[goodId] < 1) {
        addLog('‚ùå „Åù„ÅÆÂïÜÂìÅ„ÇíÊåÅ„Å£„Å¶„ÅÑ„Åæ„Åõ„ÇìÔºÅ');
        return;
    }

    const price = getPrice(goodId, false);
    const quantity = gameState.inventory[goodId];
    const totalRevenue = quantity * price;

    gameState.gold += totalRevenue;
    gameState.inventory[goodId] = 0;

    const good = goods[goodId];
    addLog(`üí∞ ${good.emoji} ${good.name}„Çí${quantity}ÂÄã„ÄÅÂêàË®à${totalRevenue}G„ÅßÂ£≤Âç¥„Åó„Åæ„Åó„Åü„ÄÇ`);

    // Add animation to gold
    const goldElement = document.getElementById('gold');
    goldElement.classList.add('gold-animation');
    setTimeout(() => goldElement.classList.remove('gold-animation'), 500);

    updateAll();
}

function travelTo(portId) {
    const travelCost = Math.round(50 / gameState.ship.speed);

    if (gameState.gold < travelCost) {
        addLog(`‚ùå Ëà™Êµ∑Ë≤ªÁî®„ÅåË∂≥„Çä„Åæ„Åõ„ÇìÔºÅ(ÂøÖË¶Å: ${travelCost}G)`);
        return;
    }

    gameState.gold -= travelCost;

    const oldPort = ports[gameState.currentPort].name;
    gameState.currentPort = portId;
    const newPort = ports[portId].name;

    // Sailing animation
    const ship = document.getElementById('ship-sprite');
    ship.classList.add('sailing');

    addLog(`‚õµ ${oldPort}„Åã„Çâ${newPort}„Å∏Ëà™Êµ∑„Åó„Åæ„Åó„ÅüÔºÅ(Ë≤ªÁî®: ${travelCost}G)`);
    addLog(`üèñÔ∏è ${ports[portId].emoji} ${newPort}„Å´Âà∞ÁùÄÔºÅ${ports[portId].description}`);

    updateAll();
}

function upgradeShip(shipIndex) {
    const newShip = shipUpgrades[shipIndex];

    if (gameState.gold < newShip.cost) {
        addLog(`‚ùå Ë≥áÈáë„ÅåË∂≥„Çä„Åæ„Åõ„ÇìÔºÅ(ÂøÖË¶Å: ${newShip.cost}G)`);
        return;
    }

    // Check if cargo exceeds new capacity
    if (getCargoUsed() > newShip.capacity) {
        addLog('‚ùå ÁèæÂú®„ÅÆÁ©çËç∑„ÅåÂ§ö„Åô„Åé„Å¶„ÄÅ„Åì„ÅÆËàπ„Å´‰πó„ÇäÊèõ„Åà„Çâ„Çå„Åæ„Åõ„ÇìÔºÅ');
        return;
    }

    gameState.gold -= newShip.cost;
    gameState.ship = { ...newShip };

    addLog(`‚öì ${newShip.name}„Å´„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„Åó„Åæ„Åó„ÅüÔºÅ`);
    addLog(`üì¶ Êñ∞„Åó„ÅÑÁ©çËºâÈáè: ${newShip.capacity} / ÈÄüÂ∫¶: ${newShip.speed}x`);

    updateAll();
}

// Initialize Game
function initGame() {
    addLog('üåä Â§ßËà™Êµ∑ÊôÇ‰ª£„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ');
    addLog('üí° ÂêÑÊ∏Ø„ÅßÂïÜÂìÅ„ÇíÂÆâ„ÅèË≤∑„ÅÑ„ÄÅÈ´ò„ÅèÂ£≤„Å£„Å¶Âà©Áõä„ÇíÂæó„Åæ„Åó„Çá„ÅÜ„ÄÇ');
    addLog('üí° Ë≥áÈáë„ÇíË≤Ø„ÇÅ„Å¶„ÄÅ„Çà„ÇäÂ§ß„Åç„Å™Ëàπ„Å´„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„Åó„Åæ„Åó„Çá„ÅÜÔºÅ');
    updateAll();
}

// Start the game when page loads
window.addEventListener('DOMContentLoaded', initGame);

// Make functions globally accessible
window.buyGood = buyGood;
window.buyAllGood = buyAllGood;
window.sellGood = sellGood;
window.sellAllGood = sellAllGood;
window.travelTo = travelTo;
window.upgradeShip = upgradeShip;
